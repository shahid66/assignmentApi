{"ast":null,"code":"import axios from \"axios\";\nimport { Hideloader, Showloader } from \"../redux/state-slice/settingsSlice\";\nimport store from \"../redux/store/store\";\nconst BaseUrl = \"http://localhost:8000/api/v1\";\nexport function RegistrationRequest(email, firstName, lastName, mobile, password) {\n  //call start\n  store.dispatch(Showloader());\n  let URL = BaseUrl + \"/register\";\n  let PostBody = {\n    \"email\": email,\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    \"mobile\": mobile,\n    \"password\": password\n  };\n  return axios.post(URL, PostBody).then(res => {\n    //call end\n    store.dispatch(Hideloader());\n\n    if (res.status === 200) {\n      if (res.data['status'] === 'fail') {\n        if (res.data['data']['keyPattern']['email'] === 1) {\n          alert('Email Already Exist');\n          return false;\n        } else {\n          alert('success');\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  }).catch(err => {\n    //call end\n    return false;\n  });\n}\n_c = RegistrationRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationRequest\");","map":{"version":3,"names":["axios","Hideloader","Showloader","store","BaseUrl","RegistrationRequest","email","firstName","lastName","mobile","password","dispatch","URL","PostBody","post","then","res","status","data","alert","catch","err"],"sources":["F:/Ostad/react/MyDashboard/mydashboard/src/API/APIRequest.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Hideloader, Showloader } from \"../redux/state-slice/settingsSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\nconst BaseUrl=\"http://localhost:8000/api/v1\";\r\n\r\nexport function RegistrationRequest(email,firstName,lastName,mobile,password){\r\n    //call start\r\n    store.dispatch(Showloader())\r\nlet URL=BaseUrl+\"/register\";\r\n    let PostBody={\"email\":email,\"firstName\":firstName,\"lastName\":lastName,\"mobile\":mobile,\"password\":password}\r\n\r\n  return axios.post(URL,PostBody).then((res)=>{\r\n    //call end\r\n    store.dispatch(Hideloader())\r\nif(res.status===200){\r\nif(res.data['status']==='fail'){\r\n    if(res.data['data']['keyPattern']['email']===1){\r\n        alert('Email Already Exist')\r\n        return false\r\n    }else{\r\n        alert('success')\r\n        return true;\r\n    }\r\n}\r\n}else{\r\n    return false;\r\n}\r\n    }).catch((err)=>{\r\n        //call end\r\n        return false;\r\n    })\r\n\r\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oCAAvC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AAEA,MAAMC,OAAO,GAAC,8BAAd;AAEA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAmCC,SAAnC,EAA6CC,QAA7C,EAAsDC,MAAtD,EAA6DC,QAA7D,EAAsE;EACzE;EACAP,KAAK,CAACQ,QAAN,CAAeT,UAAU,EAAzB;EACJ,IAAIU,GAAG,GAACR,OAAO,GAAC,WAAhB;EACI,IAAIS,QAAQ,GAAC;IAAC,SAAQP,KAAT;IAAe,aAAYC,SAA3B;IAAqC,YAAWC,QAAhD;IAAyD,UAASC,MAAlE;IAAyE,YAAWC;EAApF,CAAb;EAEF,OAAOV,KAAK,CAACc,IAAN,CAAWF,GAAX,EAAeC,QAAf,EAAyBE,IAAzB,CAA+BC,GAAD,IAAO;IAC1C;IACAb,KAAK,CAACQ,QAAN,CAAeV,UAAU,EAAzB;;IACJ,IAAGe,GAAG,CAACC,MAAJ,KAAa,GAAhB,EAAoB;MACpB,IAAGD,GAAG,CAACE,IAAJ,CAAS,QAAT,MAAqB,MAAxB,EAA+B;QAC3B,IAAGF,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiB,YAAjB,EAA+B,OAA/B,MAA0C,CAA7C,EAA+C;UAC3CC,KAAK,CAAC,qBAAD,CAAL;UACA,OAAO,KAAP;QACH,CAHD,MAGK;UACDA,KAAK,CAAC,SAAD,CAAL;UACA,OAAO,IAAP;QACH;MACJ;IACA,CAVD,MAUK;MACD,OAAO,KAAP;IACH;EACI,CAhBI,EAgBFC,KAhBE,CAgBKC,GAAD,IAAO;IACZ;IACA,OAAO,KAAP;EACH,CAnBI,CAAP;AAqBD;KA3BehB,mB"},"metadata":{},"sourceType":"module"}